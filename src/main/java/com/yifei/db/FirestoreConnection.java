package com.yifei.db;

import com.google.api.core.ApiFuture;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.*;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import org.json.JSONObject;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class FirestoreConnection implements DBConnection {

    private Firestore db;

    public FirestoreConnection() {
        String KEY_FILE = System.getenv("FIREBASE_KEY");
        InputStream serviceAccount = null;
        try {
            serviceAccount = new FileInputStream(KEY_FILE);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        GoogleCredentials credentials = null;
        try {
            credentials = GoogleCredentials.fromStream(serviceAccount);
        } catch (IOException e) {
            e.printStackTrace();
        }
        FirebaseOptions options = new FirebaseOptions.Builder()
                .setCredentials(credentials)
                .build();
        FirebaseApp.initializeApp(options);
        db = FirestoreClient.getFirestore();
    }

    @Override
    public JSONObject getCollection(String collection) throws Exception {
        ApiFuture<QuerySnapshot> future = db.collection(collection).get();
        List<QueryDocumentSnapshot> documents = future.get().getDocuments();
        JSONObject res = new JSONObject();
        List<JSONObject> users = new LinkedList<>();
        if (documents.size() > 0) {
            for (QueryDocumentSnapshot document : documents) {
                JSONObject user = new JSONObject(document.getData());
                user.put("id", document.getId());
                users.add(user);
            }
            res.put("users", users);
        } else {
            res.put("error", "No such collection");
        }
        return res;
    }

    @Override
    public JSONObject getDocument(String collection, String id) throws Exception {
        DocumentReference docRef = db.collection(collection).document(id);
        ApiFuture<DocumentSnapshot> future = docRef.get();
        DocumentSnapshot document = future.get();
        Map<String, Object> map = new HashMap<>();
        if (document.exists()) {
            map = document.getData();
            map.put("id", document.getId());
        } else {
            map.put("error", "No such document");
        }
        return new JSONObject(map);
    }

    @Override
    public JSONObject addDocument(String collection, JSONObject newUser) throws Exception {
        Map<String, Object> map = new HashMap<>();
        for (String key : newUser.keySet()) {
            map.put(key, newUser.getString(key));
        }
        ApiFuture<DocumentReference> addedDocRef = db.collection(collection).add(map);
        // id is automatically generated by Firestore
        newUser.put("id", addedDocRef.get().getId());
        return newUser;
    }

}
